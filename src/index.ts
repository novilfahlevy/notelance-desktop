import { app, BrowserWindow, ipcMain } from 'electron'
import LocalDatabase from './localDatabase'
import { CategoryLocalRepository } from './repositories/categoryLocalRepository'
import { NoteLocalRepository } from './repositories/noteLocalRepository'
import { Category, Note } from './types/data-models'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit()
}

// Setup SQLite3 for the local database
LocalDatabase.load()

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  })

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // Open the DevTools.
  mainWindow.webContents.openDevTools()
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

app.whenReady().then(() => {
  // Fetch all categories
  ipcMain.handle('fetch-categories', async () => {
    const categoryLocalRepo = new CategoryLocalRepository()
    return await categoryLocalRepo.get()
  })

  // Add new category
  ipcMain.handle('add-category', async (_, categoryName: string) => {
    const categoryLocalRepo = new CategoryLocalRepository()
    const newCategory: Category = await categoryLocalRepo.create({ name: categoryName })
    return newCategory
  })

  // Update category
  ipcMain.handle('update-category', async (_, categoryId: number, categoryName: string) => {
    const categoryLocalRepo = new CategoryLocalRepository()
    const updatedCategory: Category = await categoryLocalRepo.update(categoryId, { name: categoryName })
    return updatedCategory
  })

  // Delete category
  ipcMain.handle('delete-category', async (_, categoryId: number) => {
    const categoryLocalRepo = new CategoryLocalRepository()
    await categoryLocalRepo.delete(categoryId)
  })

  // Reorder categories
  ipcMain.handle('reorder-categories', async (_, categories: Category[]) => {
    const categoryLocalRepo = new CategoryLocalRepository()
    await categoryLocalRepo.renewOrders(categories)
  })

  // ===== NOTES HANDLERS =====

  // Fetch all notes
  ipcMain.handle('fetch-notes', async () => {
    const noteLocalRepo = new NoteLocalRepository()
    return await noteLocalRepo.get()
  })

  // Fetch notes by category
  ipcMain.handle('fetch-notes-by-category', async (_, categoryId: number | null) => {
    const noteLocalRepo = new NoteLocalRepository()
    return await noteLocalRepo.getByCategory(categoryId)
  })

  // Search notes
  ipcMain.handle('search-notes', async (_, query: string) => {
    const noteLocalRepo = new NoteLocalRepository()
    return await noteLocalRepo.search(query)
  })

  // Get note by ID
  ipcMain.handle('get-note', async (_, noteId: number) => {
    const noteLocalRepo = new NoteLocalRepository()
    return await noteLocalRepo.getById(noteId)
  })

  // Create note
  ipcMain.handle('create-note', async (_, noteData: { title: string; content: string; categoryId?: number | null }) => {
    const noteLocalRepo = new NoteLocalRepository()
    const newNote: Note = await noteLocalRepo.create({
      title: noteData.title,
      content: noteData.content,
      categoryId: noteData.categoryId,
    })
    return newNote
  })

  // Update note
  ipcMain.handle('update-note', async (_, noteId: number, updates: { title?: string; content?: string; categoryId?: number | null }) => {
    const noteLocalRepo = new NoteLocalRepository()
    const updatedNote: Note = await noteLocalRepo.update(noteId, updates)
    return updatedNote
  })

  // Delete note
  ipcMain.handle('delete-note', async (_, noteId: number) => {
    const noteLocalRepo = new NoteLocalRepository()
    await noteLocalRepo.delete(noteId)
  })

  // Count notes by category
  ipcMain.handle('count-notes-by-category', async (_, categoryId: number | null) => {
    const noteLocalRepo = new NoteLocalRepository()
    return await noteLocalRepo.countByCategory(categoryId)
  })
})